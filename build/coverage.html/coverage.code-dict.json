{"/home/travis/build/npmtest/node-npmtest-ember-table/test.js":"/* istanbul instrument in package npmtest_ember_table */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-table/lib.npmtest_ember_table.js":"/* istanbul instrument in package npmtest_ember_table */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_table = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_table = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-table/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-table && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_table */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_table\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_table.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_table.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_table.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_table.__dirname + '/lib.npmtest_ember_table.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/index.js":"'use strict';\n\nmodule.exports = {\n  name: 'ember-table',\n\n  included: function(app) {\n    this._super.included(app);\n\n    app.import(app.bowerDirectory + '/antiscroll/antiscroll.js');\n    app.import(app.bowerDirectory + '/antiscroll/antiscroll.css');\n    app.import(app.bowerDirectory + '/jquery-ui/jquery-ui.js');\n    app.import(app.bowerDirectory + '/jquery-mousewheel/jquery.mousewheel.js');\n  },\n\n  afterInstall: function() {\n    this.addBowerPackageToProject('antiscroll');\n    this.addBowerPackageToProject('jquery-mousewheel');\n    this.addBowerPackageToProject('jquery-ui');\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/Gruntfile.js":"module.exports = function (grunt) {\n  'use strict';\n\n  var path = require('path');\n\n  grunt.loadNpmTasks('grunt-banner');\n  grunt.loadNpmTasks('grunt-broccoli');\n  grunt.loadNpmTasks('grunt-contrib-clean');\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n  grunt.loadNpmTasks('grunt-release-it');\n  grunt.loadNpmTasks('grunt-text-replace');\n\n  // TODO(azirbel): We should register Ember Table, with its version, to Ember.Libraries\n\n  // Project configuration.\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\n    banner: '/*!\\n* <%=pkg.name %> v<%=pkg.version%>\\n' +\n            '* Copyright 2012-<%=grunt.template.today(\"yyyy\")%> Addepar Inc.\\n' +\n            '* See LICENSE.md\\n*/',\n\n    broccoli: {\n      dist: {\n        dest: 'dist',\n        config: 'packaging/Brocfile.js'\n      }\n    },\n\n    clean: ['tmp', 'ember-dist', 'node_modules', 'bower_components'],\n\n    replace: {\n      // The VERSION file for easy reference of the current version\n      global_version: {\n        src: ['VERSION'],\n        overwrite: true,\n        replacements: [{\n          from: /.*\\..*\\..*/,\n          to: '<%=pkg.version%>'\n        }]\n      },\n      // On the project homepage, there is a reference to the CHANGELOG and\n      // listing of the project's current version.\n      overview_page: {\n        src: ['tests/dummy/app/templates/overview.hbs'],\n        overwrite: true,\n        replacements: [{\n          from: /The current version is .*\\..*\\..*\\./,\n          to: \"The current version is <%=pkg.version%>.\"\n        }]\n      }\n    },\n\n    uglify: {\n      file: {\n        options: {\n          preserveComments: false,\n          beautify: false,\n          mangle: true,\n          report: 'min'\n        },\n\n        files: {\n          './dist/ember-table.min.js': ['./dist/ember-table.js']\n        }\n      }\n    },\n\n    // Add a banner to dist files which includes version & year of release\n    usebanner: {\n      js: {\n        options: {\n          banner: '<%=banner%>'\n        },\n        files: {\n          src: ['dist/*.js']\n        }\n      },\n      css: {\n        options: {\n          banner: '<%=banner%>'\n        },\n        files: {\n          src: ['dist/*.css']\n        }\n      }\n    },\n\n    'release-it': {\n      options: {\n        'pkgFiles': ['package.json'],\n        'commitMessage': 'Release %s',\n        'tagName': 'v%s',\n        'tagAnnotation': 'Release %s',\n        'increment': 'patch',\n        'buildCommand': 'grunt dist && ember build --environment=\"gh-pages\"',\n        'distRepo': '-b gh-pages git@github.com:addepar/ember-table',\n        'distStageDir': '.stage',\n        'distBase': 'ember-dist',\n        'distFiles': ['**/*'],\n        'publish': false\n      }\n    }\n  });\n\n  grunt.registerTask(\"dist\", [\"replace\", \"broccoli:dist:build\", \"uglify\", \"usebanner\"]);\n  grunt.registerTask(\"default\", [\"dist\"]);\n};\n\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/config/ember-try.js":"module.exports = {\n  scenarios: [\n    {\n      name: 'default',\n      dependencies: { }\n    },\n    {\n      name: 'ember-release',\n      dependencies: {\n        'ember': 'components/ember#release'\n      },\n      resolutions: {\n        'ember': 'release'\n      }\n    },\n    {\n      name: 'ember-beta',\n      dependencies: {\n        'ember': 'components/ember#beta'\n      },\n      resolutions: {\n        'ember': 'beta'\n      }\n    },\n    {\n      name: 'ember-canary',\n      dependencies: {\n        'ember': 'components/ember#canary'\n      },\n      resolutions: {\n        'ember': 'canary'\n      }\n    }\n  ]\n};\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/config/environment.js":"'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/packaging/globals.js":"var Writer = require('broccoli-writer');\nvar fs = require('fs');\nvar path = require('path');\nvar Promise = require('RSVP').Promise;\nvar walk = require('walk-sync');\n\n// TODO(azirbel): Log ember version and register with Ember.libraries?\nvar Globals = function (inputTree) {\n  options = {};\n  if (!(this instanceof Globals)) {\n    return new Globals(inputTree, options);\n  }\n  this.inputTree = inputTree;\n  this.outputPrefix = 'ember-table';\n\n  // The old global names aren't consistent: some are on Ember.Table, some on\n  // Ember.AddeparMixins, and some just on Ember. For backwards-compatibility\n  // we need to maintain the same old names.\n  this.globalNameMapping = {\n    'ember-table/components/ember-table': 'Ember.Table.EmberTableComponent',\n    'ember-table/controllers/row-array': 'Ember.Table.RowArrayController',\n    'ember-table/controllers/row': 'Ember.Table.Row',\n    'ember-table/mixins/mouse-wheel-handler': 'Ember.MouseWheelHandlerMixin',\n    'ember-table/mixins/register-table-component': 'Ember.Table.RegisterTableComponentMixin',\n    'ember-table/mixins/resize-handler': 'Ember.AddeparMixins.ResizeHandlerMixin',\n    'ember-table/mixins/scroll-handler': 'Ember.ScrollHandlerMixin',\n    'ember-table/mixins/show-horizontal-scroll': 'Ember.Table.ShowHorizontalScrollMixin',\n    'ember-table/mixins/style-bindings': 'Ember.AddeparMixins.StyleBindingsMixin',\n    'ember-table/mixins/touch-move-handler': 'Ember.TouchMoveHandlerMixin',\n    'ember-table/models/column-definition': 'Ember.Table.ColumnDefinition',\n    'ember-table/views/body-table-container': 'Ember.Table.BodyTableContainer',\n    'ember-table/views/column-sortable-indicator': 'Ember.Table.ColumnSortableIndicator',\n    'ember-table/views/footer-table-container': 'Ember.Table.FooterTableContainer',\n    'ember-table/views/header-block': 'Ember.Table.HeaderBlock',\n    'ember-table/views/header-cell': 'Ember.Table.HeaderCell',\n    'ember-table/views/header-row': 'Ember.Table.HeaderRow',\n    'ember-table/views/header-table-container': 'Ember.Table.HeaderTableContainer',\n    'ember-table/views/lazy-container': 'Ember.LazyContainerView',\n    'ember-table/views/lazy-item': 'Ember.LazyItemView',\n    'ember-table/views/lazy-table-block': 'Ember.Table.LazyTableBlock',\n    'ember-table/views/multi-item-collection': 'Ember.MultiItemViewCollectionView',\n    'ember-table/views/scroll-container': 'Ember.Table.ScrollContainer',\n    'ember-table/views/scroll-panel': 'Ember.Table.ScrollPanel',\n    'ember-table/views/table-block': 'Ember.Table.TableBlock',\n    'ember-table/views/table-cell': 'Ember.Table.TableCell',\n    'ember-table/views/table-container': 'Ember.Table.TableContainer',\n    'ember-table/views/table-row': 'Ember.Table.TableRow'\n  };\n};\n\nGlobals.prototype = Object.create(Writer.prototype);\nGlobals.prototype.constructor = Globals;\n\nGlobals.prototype.write = function(readTree, destDir) {\n  var _this = this;\n\n  this.addLinesToOutput = function(output, lines) {\n    lines.forEach(function(line) {\n      output.push(line);\n    });\n  };\n\n  return new Promise(function(resolve) {\n    readTree(_this.inputTree).then(function(srcDir) {\n      var output = [\n        \"define('ember', ['exports'], function(__exports__) {\",\n        \"  __exports__['default'] = window.Ember;\",\n        \"});\",\n        \"\",\n        \"window.Ember.Table = Ember.Namespace.create();\",\n        \"window.Ember.AddeparMixins = {};\"];\n\n      // Get a listing of all hbs files from inputTree and make sure each one\n      // is registered on Ember.TEMPLATES\n      var templateFiles = walk(srcDir).filter(function(f) {\n        return /^templates.*js$/.test(f);\n      });\n      templateFiles.forEach(function(filename) {\n        // Add ember-table namespace and remove .js extension\n        var filePath = 'ember-table/' + filename.slice(0, -3);\n        var parts = filePath.split(path.sep);\n        output.push(\"window.Ember.TEMPLATES['\" +\n            parts.slice(2).join('/') + \"']\" +\n            \" = require('\" + filePath + \"')['default'];\");\n      });\n\n      // Classes to register on the application's container. We need this\n      // because we used to refer to views by their full, global name\n      // (Ember.Table.HeaderTableContainer), but now we use the view name\n      // (header-table-container). So Ember needs to know where to find those\n      // views.\n      var toRegister = [];\n\n      // Define globals and register on the container\n      for (key in _this.globalNameMapping) {\n        // Define the global object, like Ember.Table.EmberTableComponent = ...\n        output.push(\"window.\" + _this.globalNameMapping[key] +\n            \" = require('\" + key + \"')['default'];\");\n        // Register on the container. We only need to register views and\n        // components.\n        var type = key.split('/')[1].replace(/s$/, '')\n        if (type === 'view' || type === 'component') {\n          toRegister.push({\n            type: type,\n            moduleName: key,\n            containerName: key.split('/')[2]\n          });\n        }\n      }\n\n      // On loading the ember application, register all views and components on\n      // the application's container\n      _this.addLinesToOutput(output, [\n        \"Ember.onLoad('Ember.Application', function(Application) {\",\n          \"Application.initializer({\",\n            \"name: 'ember-table',\",\n            \"initialize: function(container) {\"\n      ]);\n      _this.addLinesToOutput(output, toRegister.map(function(item) {\n        return \"container.register('\" + item.type + ':' + item.containerName +\n            \"', require('\" + item.moduleName + \"')['default']);\";\n        })\n      );\n      _this.addLinesToOutput(output, [\n            \"}\",\n          \"});\",\n        \"});\"\n      ]);\n\n      // For backwards compatibility, set a layoutName so the component\n      // actually renders\n      _this.addLinesToOutput(output, [\n        \"Ember.Table.EmberTableComponent.reopen({\",\n        \"layoutName: 'components/ember-table'\",\n        \"});\"\n      ]);\n\n      // Register table-component with handlebars so users can just use\n      // {{table-component}}\n      output.push(\"Ember.Handlebars.helper('table-component', \" +\n                  \"Ember.Table.EmberTableComponent);\");\n\n      fs.writeFileSync(path.join(destDir, 'globals-output.js'),\n          output.join(\"\\n\"));\n      resolve();\n    });\n  });\n};\n\nmodule.exports = Globals;\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/packaging/wrap.js":"/* jshint node: true */\nvar Filter = require('broccoli-filter');\n\nfunction WrapFilter (inputTree) {\n  if (!(this instanceof WrapFilter)) {\n    return new WrapFilter(inputTree);\n  }\n  Filter.call(this, inputTree);\n  this.extensions = ['js'];\n}\n\nmodule.exports = WrapFilter;\nWrapFilter.prototype = Object.create(Filter.prototype);\nWrapFilter.prototype.constructor = WrapFilter;\n\nWrapFilter.prototype.processString = function (string) {\n  return \"(function(){;\\n\" + string + \"})();\";\n};\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/addon/components/ember-table.js":"import Ember from 'ember';\nimport StyleBindingsMixin from 'ember-table/mixins/style-bindings';\nimport ResizeHandlerMixin from 'ember-table/mixins/resize-handler';\nimport RowArrayController from 'ember-table/controllers/row-array';\nimport Row from 'ember-table/controllers/row';\n\nexport default Ember.Component.extend(\nStyleBindingsMixin, ResizeHandlerMixin, {\n  classNames: ['ember-table-tables-container'],\n  classNameBindings: ['enableContentSelection:ember-table-content-selectable'],\n\n  // ---------------------------------------------------------------------------\n  // API - Inputs\n  // ---------------------------------------------------------------------------\n\n  // Values which are bound to the table's style attr. See\n  // `Ember.StyleBindingsMixin` documentation for more details.\n  styleBindings: ['height'],\n\n  // An array of row objects. Usually a hash where the keys are column names\n  // and the values are the rows's values. However, could be any object, since\n  // each column can define a function to return the column value given the row\n  // object. See `Ember.Table.ColumnDefinition.getCellContent`.\n  content: [],\n\n  // An array of column definitions: see `Ember.Table.ColumnDefinition`. Allows\n  // each column to have its own configuration.\n  // TODO(new-api): Rename to `data`\n  columns: null,\n\n  // The number of fixed columns on the left side of the table. Fixed columns\n  // are always visible, even when the table is scrolled horizontally.\n  numFixedColumns: 0,\n\n  // The number of footer rows in the table. Footer rows appear at the bottom of\n  // the table and are always visible.\n  // TODO(new-api): Rename to `numFooterRows`\n  numFooterRow: 0,\n\n  // The row height in pixels. A consistent row height is necessary to calculate\n  // which rows are being shown, to enable lazy rendering.\n  // TODO: Currently must be kept in sync with the LESS file.\n  rowHeight: 30,\n\n  // The minimum header height in pixels. Headers will grow in height if given\n  // more content than they can display.\n  // TODO: Currently must be kept in sync with the LESS file.\n  minHeaderHeight: 30,\n\n  // The footer height in pixels.\n  // TODO: Currently must be kept in sync with the LESS file.\n  footerHeight: 30,\n\n  // Enables or disables the header block.\n  hasHeader: true,\n\n  // Enables or disables the footer block.\n  // TODO(new-api): Control this via `numFooterRows` and remove from API\n  hasFooter: true,\n\n  enableColumnReorder: true,\n\n  // Allow users to select the content of table cells.\n  enableContentSelection: false,\n\n  // Sets which column resizing behavior to use. Possible values are\n  // <code>'standard'</code> (resizing a column pushes or pulls all other\n  // columns) and <code>'fluid'</code> (resizing a column steals width from\n  // neighboring columns).\n  columnMode: 'standard',\n\n  // Sets which row selection behavior to follow. Possible values are 'none'\n  // (clicking on a row does nothing), 'single' (clicking on a row selects it\n  // and deselects other rows), and 'multiple' (multiple rows can be selected\n  // through ctrl/cmd-click or shift-click).\n  selectionMode: 'single',\n\n  // ---------------------------------------------------------------------------\n  // API - Outputs\n  // ---------------------------------------------------------------------------\n\n  // An array of the rows currently selected. If `selectionMode` is set to\n  // 'single', the array will contain either one or zero elements.\n  selection: Ember.computed(function(key, val) {\n    var selectionMode = this.get('selectionMode');\n    if (arguments.length > 1 && val) {\n      this.get('persistedSelection').clear();\n      this.get('rangeSelection').clear();\n      switch (selectionMode) {\n        case 'single':\n          this.get('persistedSelection').addObject(val);\n          break;\n        case 'multiple':\n          this.get('persistedSelection').addObjects(val);\n      }\n    }\n    var selection = this.get('persistedSelection').copy().addObjects(this.get('rangeSelection'));\n    switch (selectionMode) {\n      case 'none':\n        return null;\n      case 'single':\n        return selection[0] || null;\n      case 'multiple':\n        return selection;\n    }\n  }).property('persistedSelection.[]', 'rangeSelection.[]', 'selectionMode'),\n\n  // ---------------------------------------------------------------------------\n  // Internal properties\n  // ---------------------------------------------------------------------------\n\n  // Special flag used by child views to look up this component using\n  // nearestWithProperty()\n  isEmberTable: true,\n\n  columnsFillTable: true,\n\n  // _resolvedContent is an intermediate property between content and rows\n  // This allows content to be a plain array or a promise resolving to an array\n  _resolvedContent: function(key, value) {\n    if (arguments.length > 1) {\n      return value;\n    } else {\n      var _this = this;\n      value = [];\n\n      var content = this.get('content');\n      if (content.then)\n      {\n        // content is a promise\n        content.then(function(resolvedContent) {\n          // when the promise resolves, set this property so it gets cached\n          _this.set('_resolvedContent', resolvedContent);\n\n          // if the promise resolves immediately, set `value` so we return\n          // the resolved value and not []\n          value = resolvedContent;\n        });\n\n        // returns [] if the promise doesn't resolve immediately, or \n        // the resolved value if it's ready\n        return value;\n      }\n      else\n      {\n        // content is not a promise\n        return content;\n      }\n    }\n  }.property('content'),\n\n  init: function() {\n    this._super();\n    if (!Ember.$.ui) {\n      throw 'Missing dependency: jquery-ui';\n    }\n    if (!Ember.$().mousewheel) {\n      throw 'Missing dependency: jquery-mousewheel';\n    }\n    if (!Ember.$().antiscroll) {\n      throw 'Missing dependency: antiscroll.js';\n    }\n    this.prepareTableColumns();\n  },\n\n  height: Ember.computed.alias('_tablesContainerHeight'),\n\n  // TODO(new-api): eliminate view alias\n  // specify the view class to use for rendering the table rows\n  tableRowView: 'table-row',\n  tableRowViewClass: Ember.computed.alias('tableRowView'),\n\n  onColumnSort: function(column, newIndex) {\n    // Fixed columns are not affected by column reordering\n    var numFixedColumns = this.get('fixedColumns.length');\n    var columns = this.get('columns');\n    columns.removeObject(column);\n    columns.insertAt(numFixedColumns + newIndex, column);\n    this.prepareTableColumns();\n    this.sendAction('onColumnReordered', columns, column, newIndex);\n  },\n\n  // An array of Ember.Table.Row computed based on `content`\n  bodyContent: Ember.computed(function() {\n    return RowArrayController.create({\n      target: this,\n      parentController: this,\n      container: this.get('container'),\n      itemController: Row,\n      content: this.get('_resolvedContent')\n    });\n  }).property('_resolvedContent.[]'),\n\n  // An array of Ember.Table.Row\n  footerContent: Ember.computed(function(key, value) {\n    if (value) {\n      return value;\n    } else {\n      return Ember.A();\n    }\n  }).property(),\n\n  fixedColumns: Ember.computed(function() {\n    var columns = this.get('columns');\n    if (!columns) {\n      return Ember.A();\n    }\n    var numFixedColumns = this.get('numFixedColumns') || 0;\n    return columns.slice(0, numFixedColumns) || [];\n  }).property('columns.[]', 'numFixedColumns'),\n\n  tableColumns: Ember.computed(function() {\n    var columns = this.get('columns');\n    if (!columns) {\n      return Ember.A();\n    }\n    var numFixedColumns = this.get('numFixedColumns') || 0;\n    return columns.slice(numFixedColumns, columns.get('length')) || [];\n  }).property('columns.[]', 'numFixedColumns'),\n\n  prepareTableColumns: function() {\n    var _this = this;\n    var columns = this.get('columns') || Ember.A();\n    columns.setEach('controller', this);\n    columns.forEach(function(col, i) {\n      col.set('nextResizableColumn', _this.getNextResizableColumn(columns, i));\n    });\n  },\n\n  getNextResizableColumn: function(columns, index) {\n    var column;\n    while (index < columns.length) {\n      index += 1;\n      column = columns.objectAt(index);\n      if (column != null && column.get('isResizable')) {\n        return column;\n      }\n    }\n    return null;\n  },\n\n  // ---------------------------------------------------------------------------\n  // View concerns\n  // ---------------------------------------------------------------------------\n\n  didInsertElement: function() {\n    this._super();\n    this.set('_tableScrollTop', 0);\n    this.elementSizeDidChange();\n    this.doForceFillColumns();\n  },\n\n  willDestroyElement: function() {\n    var antiscrollElements = this.$('.antiscroll-wrap');\n    var antiscroll;\n    antiscrollElements.each(function(i, antiscrollElement) {\n      antiscroll = Ember.$(antiscrollElement).data('antiscroll');\n      if (antiscroll) {\n        antiscroll.destroy();\n        Ember.$(antiscrollElement).removeData('antiscroll');\n      }\n    });\n    this._super();\n  },\n\n  onResizeEnd: function() {\n    // We need to put this on the run loop, because resize event came from\n    // window. Otherwise, we get this warning when used in tests. You have\n    // turned on testing mode, which disabled the run-loop's autorun. You\n    // will need to wrap any code with asynchronous side-effects in an\n    // Ember.run\n    if (this.tableWidthNowTooSmall()) {\n      this.set('columnsFillTable', true);\n    }\n    Ember.run(this, this.elementSizeDidChange);\n  },\n\n  elementSizeDidChange: function() {\n    if ((this.get('_state') || this.get('state')) !== 'inDOM') {\n      return;\n    }\n    this.set('_width', this.$().parent().width());\n    this.set('_height', this.$().parent().height());\n    // we need to wait for the table to be fully rendered before antiscroll can\n    // be used\n    Ember.run.next(this, this.updateLayout);\n  },\n\n  tableWidthNowTooSmall: function() {\n    if ((this.get('_state') || this.get('state')) !== 'inDOM') {\n      return false;\n    }\n    var oldTableWidth = this.get('_width');\n    var newTableWidth = this.$().parent().width();\n    // TODO(azirbel): This should be 'columns', I believe. Fix separately.\n    var totalColumnWidth = this._getTotalWidth(this.get('tableColumns'));\n    return (oldTableWidth > totalColumnWidth) && (newTableWidth < totalColumnWidth);\n  },\n\n  updateLayout: function() {\n    if ((this.get('_state') || this.get('state')) !== 'inDOM') {\n      return;\n    }\n    // updating antiscroll\n    this.$('.antiscroll-wrap').antiscroll().data('antiscroll').rebuild();\n    if (this.get('columnsFillTable')) {\n      this.doForceFillColumns();\n    }\n  },\n\n  // Iteratively adjusts column widths to adjust to a changed table width.\n  // Attempts to scale columns proportionally. However, if a column hits a min\n  // or max width after scaling proportionally, we need to respect that setting.\n  // In that case, keep iterating until all column widths are set to the best\n  // they can be. Note that this may fail to arrive at the table width if the\n  // resizable columns are all restricted by min/max widths.\n  doForceFillColumns: function() {\n    var allColumns = this.get('columns');\n    var columnsToResize = allColumns.filterProperty('canAutoResize');\n    var unresizableColumns = allColumns.filterProperty('canAutoResize', false);\n    var availableWidth = this.get('_width') - this._getTotalWidth(unresizableColumns);\n    var doNextLoop = true;\n    var nextColumnsToResize = [];\n    var totalResizableWidth;\n    var newWidth;\n\n    while (doNextLoop) {\n      doNextLoop = false;\n      nextColumnsToResize = [];\n      totalResizableWidth = this._getTotalWidth(columnsToResize);\n      /*jshint loopfunc:true */\n      // TODO(azirbel): Revisit JSHint error above\n      columnsToResize.forEach(function(column) {\n        newWidth = Math.floor((column.get('width') / totalResizableWidth) * availableWidth);\n        if (newWidth < column.get('minWidth')) {\n          doNextLoop = true;\n          column.set('width', column.get('minWidth'));\n          availableWidth -= column.get('width');\n        } else if (newWidth > column.get('maxWidth')) {\n          doNextLoop = true;\n          column.set('width', column.get('maxWidth'));\n          availableWidth -= column.get('width');\n        } else {\n          column.set('width', newWidth);\n          nextColumnsToResize.pushObject(column);\n        }\n        columnsToResize = nextColumnsToResize;\n      });\n    }\n  },\n\n  onBodyContentLengthDidChange: Ember.observer(function() {\n    Ember.run.next(this, function() {\n      Ember.run.once(this, this.updateLayout);\n    });\n  }, 'bodyContent.length'),\n\n  // ---------------------------------------------------------------------------\n  // Private variables\n  // ---------------------------------------------------------------------------\n\n  _tableScrollTop: 0,\n  _tableScrollLeft: 0,\n\n  _width: null,\n  _height: null,\n  _contentHeaderHeight: null,\n\n  _hasVerticalScrollbar: Ember.computed(function() {\n    var height = this.get('_height');\n    var contentHeight = this.get('_tableContentHeight') +\n        this.get('_headerHeight') + this.get('_footerHeight');\n    return height < contentHeight;\n  }).property('_height', '_tableContentHeight', '_headerHeight',\n      '_footerHeight'),\n\n  _hasHorizontalScrollbar: Ember.computed(function() {\n    var contentWidth = this.get('_tableColumnsWidth');\n    var tableWidth = this.get('_width') - this.get('_fixedColumnsWidth');\n    return contentWidth > tableWidth;\n  }).property('_tableColumnsWidth', '_width', '_fixedColumnsWidth'),\n\n  // tables-container height adjusts to the content height\n  _tablesContainerHeight: Ember.computed(function() {\n    var height = this.get('_height');\n    var contentHeight = this.get('_tableContentHeight') +\n        this.get('_headerHeight') + this.get('_footerHeight');\n    return Math.min(contentHeight, height);\n  }).property('_height', '_tableContentHeight', '_headerHeight',\n      '_footerHeight'),\n\n  // Actual width of the fixed columns\n  _fixedColumnsWidth: Ember.computed(function() {\n    return this._getTotalWidth(this.get('fixedColumns'));\n  }).property('fixedColumns.@each.width'),\n\n  // Actual width of the (non-fixed) columns\n  _tableColumnsWidth: Ember.computed(function() {\n    // Hack: We add 3px padding to the right of the table content so that we can\n    // reorder into the last column.\n    var contentWidth = this._getTotalWidth(this.get('tableColumns')) + 3;\n    var availableWidth = this.get('_width') - this.get('_fixedColumnsWidth');\n    return Math.max(contentWidth, availableWidth);\n  }).property('tableColumns.@each.width', '_width', '_fixedColumnsWidth'),\n\n  _rowWidth: Ember.computed(function() {\n    var columnsWidth = this.get('_tableColumnsWidth');\n    var nonFixedTableWidth = this.get('_tableContainerWidth') -\n        this.get('_fixedColumnsWidth');\n    return Math.max(columnsWidth, nonFixedTableWidth);\n  }).property('_fixedColumnsWidth', '_tableColumnsWidth',\n      '_tableContainerWidth'),\n\n  // Dynamic header height that adjusts according to the header content height\n  _headerHeight: Ember.computed(function() {\n    var minHeight = this.get('minHeaderHeight');\n    var contentHeaderHeight = this.get('_contentHeaderHeight');\n    return Math.max(contentHeaderHeight, minHeight);\n  }).property('_contentHeaderHeight', 'minHeaderHeight'),\n\n  // Dynamic footer height that adjusts according to the footer content height\n  _footerHeight: Ember.computed(function() {\n    return this.get('hasFooter') ? this.get('footerHeight') : 0;\n  }).property('footerHeight', 'hasFooter'),\n\n  _bodyHeight: Ember.computed(function() {\n    var bodyHeight = this.get('_tablesContainerHeight');\n    if (this.get('hasHeader')) {\n      bodyHeight -= this.get('_headerHeight');\n    }\n    if (this.get('hasFooter')) {\n      bodyHeight -= this.get('footerHeight');\n    }\n    return bodyHeight;\n  }).property('_tablesContainerHeight', '_hasHorizontalScrollbar',\n      '_headerHeight', 'footerHeight', 'hasHeader', 'hasFooter'),\n\n  _tableBlockWidth: Ember.computed(function() {\n    return this.get('_width') - this.get('_fixedColumnsWidth');\n  }).property('_width', '_fixedColumnsWidth'),\n\n  _fixedBlockWidthBinding: '_fixedColumnsWidth',\n\n  _tableContentHeight: Ember.computed(function() {\n    return this.get('rowHeight') * this.get('bodyContent.length');\n  }).property('rowHeight', 'bodyContent.length'),\n\n  _tableContainerWidth: Ember.computed(function() {\n    return this.get('_width');\n  }).property('_width'),\n\n  _scrollContainerWidth: Ember.computed(function() {\n    return this.get('_width') - this.get('_fixedColumnsWidth');\n  }).property('_width', '_fixedColumnsWidth'),\n\n  _numItemsShowing: Ember.computed(function() {\n    return Math.floor(this.get('_bodyHeight') / this.get('rowHeight'));\n  }).property('_bodyHeight', 'rowHeight'),\n\n  _startIndex: Ember.computed(function() {\n    var numContent = this.get('bodyContent.length');\n    var numViews = this.get('_numItemsShowing');\n    var rowHeight = this.get('rowHeight');\n    var scrollTop = this.get('_tableScrollTop');\n    var index = Math.floor(scrollTop / rowHeight);\n    // Adjust start index so that end index doesn't exceed content length\n    if (index + numViews >= numContent) {\n      index = numContent - numViews;\n    }\n    return Math.max(index, 0);\n  }).property('bodyContent.length', '_numItemsShowing', 'rowHeight',\n      '_tableScrollTop'),\n\n  _getTotalWidth: function(columns, columnWidthPath) {\n    if (columnWidthPath == null) {\n      columnWidthPath = 'width';\n    }\n    if (!columns) {\n      return 0;\n    }\n    var widths = columns.getEach(columnWidthPath) || [];\n    return widths.reduce((function(total, w) {\n      return total + w;\n    }), 0);\n  },\n\n  // ---------------------------------------------------------------------------\n  // Selection\n  // TODO: Make private or reorganize into a new section\n  // ---------------------------------------------------------------------------\n\n  lastSelected: null,\n\n  isSelected: function(row) {\n    switch (this.get('selectionMode')) {\n      case 'none':\n        return false;\n      case 'single':\n        return this.get('selection') === row.get('content');\n      case 'multiple':\n        return this.get('selection').contains(row.get('content'));\n    }\n  },\n\n  setSelected: function(row, val) {\n    this.persistSelection();\n    var item = row.get('content');\n    if (val) {\n      return this.get('persistedSelection').addObject(item);\n    } else {\n      return this.get('persistedSelection').removeObject(item);\n    }\n  },\n\n  // items that were selected directly or as part of a previous\n  // range selection (shift-click)\n  persistedSelection: Ember.computed(function() {\n    return Ember.A();\n  }),\n\n  // items that are part of the currently editable range selection\n  rangeSelection: Ember.computed(function() {\n    return Ember.A();\n  }),\n\n  // TODO: Handle click event in the row view\n  click: function(event) {\n    var row = this.getRowForEvent(event);\n    if (!row || !row.get('content')) {\n      return;\n    }\n    var item = row.get('content');\n    switch (this.get('selectionMode')) {\n      case 'none':\n        break;\n      case 'single':\n        this.get('persistedSelection').clear();\n        this.get('persistedSelection').addObject(item);\n        break;\n      case 'multiple':\n        if (event.shiftKey) {\n          this.get('rangeSelection').clear();\n\n          var lastIndex = this.rowIndex(this.get('lastSelected'));\n          // If the last selected row is no longer in the table, use the\n          // first row in the table\n          if (lastIndex === -1) {\n            lastIndex = 0;\n          }\n\n          var curIndex = this.rowIndex(this.getRowForEvent(event));\n          var minIndex = Math.min(lastIndex, curIndex);\n          var maxIndex = Math.max(lastIndex, curIndex);\n\n          this.get('rangeSelection').addObjects(\n            this.get('bodyContent').slice(minIndex, maxIndex + 1)\n            .mapBy('content')\n          );\n        } else {\n          if (!event.ctrlKey && !event.metaKey) {\n            this.get('persistedSelection').clear();\n            this.get('rangeSelection').clear();\n          } else {\n            this.persistSelection();\n          }\n          if (this.get('persistedSelection').contains(item)) {\n            this.get('persistedSelection').removeObject(item);\n          } else {\n            this.get('persistedSelection').addObject(item);\n          }\n          this.set('lastSelected', row);\n        }\n        break;\n    }\n  },\n\n  findRow: function(content) {\n    // TODO(azirbel): Replace with filter\n    this.get('bodyContent').forEach(function(row) {\n      if (row.get('content') === content) {\n        return row;\n      }\n    });\n    return null;\n  },\n\n  rowIndex: function(row) {\n    if (!this.get('bodyContent')) {\n      return null;\n    }\n    return this.get('bodyContent').indexOf(row);\n  },\n\n  persistSelection: function() {\n    this.get('persistedSelection').addObjects(this.get('rangeSelection'));\n    this.get('rangeSelection').clear();\n  },\n\n  getRowForEvent: function(event) {\n    var $rowView = Ember.$(event.target).parents('.ember-table-table-row');\n    var view = Ember.View.views[$rowView.attr('id')];\n    if (view) {\n      return view.get('row');\n    }\n    return null;\n  },\n\n  // TODO(azirbel): Document\n  actions: {\n    addColumn: Ember.K,\n    sortByColumn: Ember.K\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/addon/controllers/row-array.js":"import Ember from 'ember';\n\nexport default Ember.ArrayController.extend({\n  itemController: null,\n  content: null,\n  lastItem: null,\n\n  rowContent: Ember.computed(function() {\n    return [];\n  }).property(),\n\n  controllerAt: function(idx, object) {\n    var subControllers = this.get('_subControllers');\n    var subController = subControllers[idx];\n    if (subController) {\n      return subController;\n    }\n    subController = this.get('itemController').create({\n      target: this,\n      parentController: this.get('parentController') || this,\n      content: object\n    });\n    subControllers[idx] = subController;\n\n    // Keep track of the last row. Because we only use last row status to apply\n    // CSS styles, we only need to know which row is the last row when the row\n    // is loaded/scrolled into view. At that time, we update the `lastItem`\n    // property. This avoids the problem where the last row's data is always\n    // loaded (e.g. in the AJAX table). See issue #165.\n    if (this._isLastItem(idx)) {\n      this.set('lastItem', subController);\n    }\n    return subController;\n  },\n\n  _isLastItem: function(idx) {\n    return this.get('content').length - 1 === idx;\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/addon/controllers/row.js":"import Ember from 'ember';\n\nexport default Ember.ObjectProxy.extend({\n  content: null,\n\n  isShowing: true,\n  isHovered: false,\n\n  isSelected: Ember.computed(function(key, val) {\n    if (arguments.length > 1) {\n      this.get('parentController').setSelected(this, val);\n    }\n    return this.get('parentController').isSelected(this);\n  }).property('parentController.selection.[]')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/addon/mixins/mouse-wheel-handler.js":"import Ember from 'ember';\n\nexport default Ember.Mixin.create({\n  onMouseWheel: Ember.K,\n\n  didInsertElement: function() {\n    var _this = this;\n    this._super();\n    this.$().bind('mousewheel', function(event, delta, deltaX, deltaY) {\n      Ember.run(_this, _this.onMouseWheel, event, delta, deltaX, deltaY);\n    });\n  },\n\n  willDestroyElement: function() {\n    var $elem = this.$();\n    if ($elem) {\n      $elem.unbind('mousewheel');\n    }\n    this._super();\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/addon/mixins/register-table-component.js":"// Gives views access to the table component. With the current architecture,\n// this is necessary because views need access to the component's properties\n// (like height and columnMode) and may even need to call component functions\n// (trigger refresh layout).\n//\n// It is possible to override this behavior by passing your own tableComponent\n// to the views instead.\nimport Ember from 'ember';\n\nexport default Ember.Mixin.create({\n  tableComponent: null,\n\n  init: function() {\n    if (!this.get('tableComponent')) {\n      this.set('tableComponent', this.nearestWithProperty('isEmberTable'));\n    }\n    return this._super();\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/addon/mixins/resize-handler.js":"// TODO(azirbel): This needs to be an external dependency.\nimport Ember from 'ember';\n\nexport default Ember.Mixin.create({\n  resizeEndDelay: 200,\n  resizing: false,\n  onResizeStart: Ember.K,\n  onResizeEnd: Ember.K,\n  onResize: Ember.K,\n\n  endResize: Ember.computed(function() {\n    return function(event) {\n      if (this.isDestroyed) {\n        return;\n      }\n      this.set('resizing', false);\n      return typeof this.onResizeEnd === \"function\" ? this.onResizeEnd(event) : void 0;\n    };\n  }),\n\n  handleWindowResize: function(event) {\n    if ((typeof event.target.id !== \"undefined\" && event.target.id !== null) &&\n        (event.target.id !== this.elementId)) {\n      return;\n    }\n    if (!this.get('resizing')) {\n      this.set('resizing', true);\n      if (typeof this.onResizeStart === \"function\") {\n        this.onResizeStart(event);\n      }\n    }\n    if (typeof this.onResize === \"function\") {\n      this.onResize(event);\n    }\n    return Ember.run.debounce(this, this.get('endResize'), event, this.get('resizeEndDelay'));\n  },\n\n  didInsertElement: function() {\n    this._super();\n    return this._setupDocumentHandlers();\n  },\n\n  willDestroyElement: function() {\n    this._removeDocumentHandlers();\n    return this._super();\n  },\n\n  _setupDocumentHandlers: function() {\n    if (this._resizeHandler) {\n      return;\n    }\n    this._resizeHandler = Ember.$.proxy(this.get('handleWindowResize'), this);\n    return Ember.$(window).on(\"resize.\" + this.elementId, this._resizeHandler);\n  },\n\n  _removeDocumentHandlers: function() {\n    Ember.$(window).off(\"resize.\" + this.elementId, this._resizeHandler);\n    return this._resizeHandler = null;\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/addon/mixins/scroll-handler.js":"import Ember from 'ember';\n\nexport default Ember.Mixin.create({\n  onScroll: Ember.K,\n  scrollElementSelector: '',\n\n  didInsertElement: function() {\n    var _this = this;\n    this._super();\n    this.$(this.get('scrollElementSelector')).bind('scroll', function(event) {\n      Ember.run(_this, _this.onScroll, event);\n    });\n  },\n\n  willDestroyElement: function() {\n    var $scrollElementSelector = this.$(this.get('scrollElementSelector'));\n    if ($scrollElementSelector) {\n      $scrollElementSelector.unbind('scroll');\n    }\n    this._super();\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/addon/mixins/show-horizontal-scroll.js":"// HACK: We want the horizontal scroll to show on mouse enter and leave.\nimport Ember from 'ember';\n\nexport default Ember.Mixin.create({\n  mouseEnter: function(event) {\n    var $tablesContainer =\n        Ember.$(event.target).parents('.ember-table-tables-container');\n    var $horizontalScroll =\n        $tablesContainer.find('.antiscroll-scrollbar-horizontal');\n    $horizontalScroll.addClass('antiscroll-scrollbar-shown');\n  },\n\n  mouseLeave: function(event) {\n    var $tablesContainer =\n        Ember.$(event.target).parents('.ember-table-tables-container');\n    var $horizontalScroll =\n        $tablesContainer.find('.antiscroll-scrollbar-horizontal');\n    $horizontalScroll.removeClass('antiscroll-scrollbar-shown');\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/addon/mixins/style-bindings.js":"// TODO(azirbel): This needs to be an external dependency.\nimport Ember from 'ember';\n\nexport default Ember.Mixin.create({\n  concatenatedProperties: ['styleBindings'],\n  attributeBindings: ['style'],\n  unitType: 'px',\n  createStyleString: function(styleName, property) {\n    var value;\n    value = this.get(property);\n    if (Ember.isNone(value)) {\n      return;\n    }\n    if (Ember.typeOf(value) === 'number') {\n      value = value + this.get('unitType');\n    }\n    return Ember.String.dasherize(\"\" + styleName) + \":\" + value + \";\";\n  },\n  applyStyleBindings: Ember.on('init',\n    Ember.observer('styleBindings', function() {\n    var lookup, properties, styleBindings, styleComputed, styles,\n      _this = this;\n    styleBindings = this.get('styleBindings');\n    if (!styleBindings) {\n      return;\n    }\n    lookup = {};\n    styleBindings.forEach(function(binding) {\n      var property, style, tmp;\n      tmp = binding.split(':');\n      property = tmp[0];\n      style = tmp[1];\n      lookup[style || property] = property;\n    });\n    styles = Ember.keys(lookup);\n    properties = styles.map(function(style) {\n      return lookup[style];\n    });\n    styleComputed = Ember.computed(function() {\n      var styleString, styleTokens;\n      styleTokens = styles.map(function(style) {\n        return _this.createStyleString(style, lookup[style]);\n      });\n      styleString = styleTokens.join('');\n      if (styleString.length !== 0) {\n        return new Ember.Handlebars.SafeString(styleString);\n      }\n    });\n    styleComputed.property.apply(styleComputed, properties);\n    return Ember.defineProperty(this, 'style', styleComputed);\n  }))\n});\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/addon/mixins/touch-move-handler.js":"import Ember from 'ember';\n\nexport default Ember.Mixin.create({\n  onTouchMove: Ember.K,\n\n  didInsertElement: function() {\n    var _this = this;\n    var startX = 0;\n    var startY = 0;\n\n    this._super();\n\n    this.$().bind('touchstart', function(event) {\n      startX = event.originalEvent.targetTouches[0].pageX;\n      startY = event.originalEvent.targetTouches[0].pageY;\n    });\n\n    this.$().bind('touchmove', function(event) {\n      var newX = event.originalEvent.targetTouches[0].pageX;\n      var newY = event.originalEvent.targetTouches[0].pageY;\n      var deltaX = -(newX - startX);\n      var deltaY = -(newY - startY);\n      Ember.run(_this, _this.onTouchMove, event, deltaX, deltaY);\n      startX = newX;\n      startY = newY;\n    });\n  },\n\n  willDestroyElement: function() {\n    this.$().unbind('touchstart');\n    this.$().unbind('touchmove');\n    this._super();\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/addon/models/column-definition.js":"import Ember from 'ember';\n\nexport default Ember.Object.extend({\n  // ---------------------------------------------------------------------------\n  // API - Inputs\n  // ---------------------------------------------------------------------------\n\n  // Name of the column, to be displayed in the header.\n  // TODO(new-api): Change to `columnName`\n  headerCellName: undefined,\n\n  // Path of the content for this cell. If the row object is a hash of keys\n  // and values to specify data for each column, `contentPath` corresponds to\n  // the key.\n  contentPath: undefined,\n\n  // Minimum column width. Affects both manual resizing and automatic resizing.\n  minWidth: 25,\n\n  // Maximum column width. Affects both manual resizing and automatic resizing.\n  maxWidth: undefined,\n\n  // The initial column width in pixels. Updated whenever the column (not\n  // window) is resized. Can be persisted.\n  savedWidth: 150,\n\n  // Whether the column can be manually resized.\n  isResizable: true,\n\n  // Whether the column can be rearranged with other columns. Only matters if\n  // the table's `enableColumnReorder` property is set to true (the default).\n  // TODO(new-api): Rename to `isReorderable`\n  isSortable: true,\n\n  // Alignment of the text in the cell. Possible values are \"left\", \"center\",\n  // and \"right\".\n  textAlign: 'text-align-right',\n\n  // Whether the column can automatically resize to fill space in the table.\n  canAutoResize: false,\n\n  // TODO(new-api): Remove `headerCellViewClass`\n  // Override to specify a custom view to use for the header cell.\n  headerCellView: 'header-cell',\n  headerCellViewClass: Ember.computed.alias('headerCellView'),\n\n  // TODO(new-api): Remove `tableCellViewClass`\n  // Override to specify a custom view to use for table cells.\n  tableCellView: 'table-cell',\n  tableCellViewClass: Ember.computed.alias('tableCellView'),\n\n  // Override to customize how the column gets data from each row object.\n  // Given a row, should return a formatted cell value, e.g. $20,000,000.\n  getCellContent: function(row) {\n    var path = this.get('contentPath');\n    Ember.assert(\"You must either provide a contentPath or override \" +\n                 \"getCellContent in your column definition\", path != null);\n    return Ember.get(row, path);\n  },\n\n  // Override to maintain a consistent path to update cell values.\n  // Recommended to make this a function which takes (row, value) and updates\n  // the row value.\n  setCellContent: Ember.K,\n\n  // ---------------------------------------------------------------------------\n  // Internal properties\n  // ---------------------------------------------------------------------------\n\n  // In most cases, should be set by the table and not overridden externally.\n  // Instead, use savedWidth and minWidth/maxWidth along with resize behavior.\n  width: Ember.computed.oneWay('savedWidth'),\n\n  // Not part of the official API, but can be overridden if you need custom\n  // behavior (e.g. persistence) when the column is resized, and `savedWidth`\n  // doesn't solve your problem.\n  resize: function(width) {\n    this.set('savedWidth', width);\n    this.set('width', width);\n  },\n\n  // Set when the table is initialized. Used to resize columns by stealing\n  // width from the next column to the right.\n  nextColumn: null,\n  prevColumn: null,\n\n  isAtMinWidth: Ember.computed(function() {\n    return this.get('width') === this.get('minWidth');\n  }).property('width', 'minWidth'),\n\n  isAtMaxWidth: Ember.computed(function() {\n    return this.get('width') === this.get('maxWidth');\n  }).property('width', 'maxWidth')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/addon/views/body-table-container.js":"import Ember from 'ember';\nimport TableContainer from 'ember-table/views/table-container';\nimport ShowHorizontalScrollMixin from 'ember-table/mixins/show-horizontal-scroll';\nimport RegisterTableComponentMixin from 'ember-table/mixins/register-table-component';\nimport MouseWheelHandlerMixin from 'ember-table/mixins/mouse-wheel-handler';\nimport TouchMoveHandlerMixin from 'ember-table/mixins/touch-move-handler';\nimport ScrollHandlerMixin from 'ember-table/mixins/scroll-handler';\n\nexport default TableContainer.extend(\nMouseWheelHandlerMixin, TouchMoveHandlerMixin, ScrollHandlerMixin,\nShowHorizontalScrollMixin, RegisterTableComponentMixin, {\n  templateName: 'body-table-container',\n  classNames: ['ember-table-table-container',\n      'ember-table-body-container',\n      'antiscroll-wrap'],\n\n  height: Ember.computed.alias('tableComponent._bodyHeight'),\n  width: Ember.computed.alias('tableComponent._width'),\n  scrollTop: Ember.computed.alias('tableComponent._tableScrollTop'),\n  scrollLeft: Ember.computed.alias('tableComponent._tableScrollLeft'),\n  scrollElementSelector: '.antiscroll-inner',\n\n  onScroll: function(event) {\n    this.set('scrollTop', event.target.scrollTop);\n    return event.preventDefault();\n  },\n\n  // `event` here is a jQuery event\n  onMouseWheel: function(event, delta, deltaX, deltaY) {\n    if (Math.abs(deltaX) <= Math.abs(deltaY)) {\n      return;\n    }\n    var scrollLeft = this.$('.ember-table-right-table-block').scrollLeft() + deltaX;\n    this.set('scrollLeft', scrollLeft);\n    event.preventDefault();\n  },\n\n  // `event` here is a jQuery event\n  onTouchMove: function(event, deltaX, deltaY) {\n    if (Math.abs(deltaX) <= Math.abs(deltaY)) {\n      return;\n    }\n    var scrollLeft = this.$('.ember-table-right-table-block').scrollLeft() + deltaX;\n    this.set('scrollLeft', scrollLeft);\n    event.preventDefault();\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/addon/views/column-sortable-indicator.js":"import Ember from 'ember';\nimport StyleBindingsMixin from 'ember-table/mixins/style-bindings';\nimport RegisterTableComponentMixin from 'ember-table/mixins/register-table-component';\n\nexport default Ember.View.extend(\nStyleBindingsMixin, RegisterTableComponentMixin, {\n  classNames: 'ember-table-column-sortable-indicator',\n  classNameBindings: 'tableComponent._isShowingSortableIndicator:active',\n  styleBindings: ['left', 'height'],\n  left: Ember.computed.alias('tableComponent._sortableIndicatorLeft'),\n  height: Ember.computed.alias('tableComponent._height')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/addon/views/footer-table-container.js":"import Ember from 'ember';\nimport TableContainer from 'ember-table/views/table-container';\nimport ShowHorizontalScrollMixin from 'ember-table/mixins/show-horizontal-scroll';\nimport RegisterTableComponentMixin from 'ember-table/mixins/register-table-component';\nimport MouseWheelHandlerMixin from 'ember-table/mixins/mouse-wheel-handler';\nimport TouchMoveHandlerMixin from 'ember-table/mixins/touch-move-handler';\n\nexport default TableContainer.extend(\nMouseWheelHandlerMixin, TouchMoveHandlerMixin, ShowHorizontalScrollMixin,\nRegisterTableComponentMixin, {\n  templateName: 'footer-table-container',\n  classNames: ['ember-table-table-container',\n    'ember-table-fixed-table-container',\n    'ember-table-footer-container'],\n  styleBindings: 'top',\n  height: Ember.computed.alias('tableComponent.footerHeight'),\n  width: Ember.computed.alias('tableComponent._tableContainerWidth'),\n  scrollLeft: Ember.computed.alias('tableComponent._tableScrollLeft'),\n\n  top: Ember.computed(function() {\n    var headerHeight = this.get('tableComponent._headerHeight');\n    var contentHeight = this.get('tableComponent._tableContentHeight') +\n        headerHeight;\n    var bodyHeight = this.get('tableComponent._bodyHeight') + headerHeight;\n    if (contentHeight < bodyHeight) {\n      return contentHeight;\n    } else {\n      return bodyHeight;\n    }\n  }).property('tableComponent._bodyHeight', 'tableComponent._headerHeight',\n      'tableComponent._tableContentHeight'),\n\n  onMouseWheel: function(event, delta, deltaX) {\n    var scrollLeft = this.$('.ember-table-right-table-block').scrollLeft() +\n        deltaX;\n    this.set('scrollLeft', scrollLeft);\n    event.preventDefault();\n  },\n\n  onTouchMove: function(event, deltaX) {\n    var scrollLeft = this.$('.ember-table-right-table-block').scrollLeft() +\n        deltaX;\n    this.set('scrollLeft', scrollLeft);\n    event.preventDefault();\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/addon/views/header-block.js":"import Ember from 'ember';\nimport TableBlock from '../views/table-block';\n\nexport default TableBlock.extend({\n  classNames: ['ember-table-header-block'],\n  // TODO(new-api): Eliminate view alias\n  itemView: 'header-row',\n  itemViewClass: Ember.computed.alias('itemView'),\n\n  content: Ember.computed(function() {\n    return [this.get('columns')];\n  }).property('columns'),\n\n  onColumnsDidChange: Ember.observer(function() {\n    var _this = this;\n    Ember.run.schedule('afterRender', function() {\n      if ((_this.get('_state') || _this.get('state')) !== 'inDOM') {\n        return;\n      }\n      _this.$().scrollLeft(_this.get('scrollLeft'));\n    });\n  }, 'content')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/addon/views/header-cell.js":"import Ember from 'ember';\nimport StyleBindingsMixin from 'ember-table/mixins/style-bindings';\nimport RegisterTableComponentMixin from 'ember-table/mixins/register-table-component';\n\nexport default Ember.View.extend(\nStyleBindingsMixin, RegisterTableComponentMixin, {\n  // ---------------------------------------------------------------------------\n  // API - Inputs\n  // ---------------------------------------------------------------------------\n\n  // TODO: Doc\n  templateName: 'header-cell',\n  classNames: ['ember-table-cell', 'ember-table-header-cell'],\n  classNameBindings: ['column.isSortable:sortable', 'column.textAlign'],\n  styleBindings: ['width', 'height'],\n\n  // ---------------------------------------------------------------------------\n  // Internal properties\n  // ---------------------------------------------------------------------------\n\n  column: Ember.computed.alias('content'),\n  width: Ember.computed.alias('column.width'),\n  minWidth: Ember.computed.alias('column.minWidth'),\n  maxWidth: Ember.computed.alias('column.maxWidth'),\n  nextResizableColumn: Ember.computed.alias('column.nextResizableColumn'),\n  height: Ember.computed.alias('tableComponent._headerHeight'),\n\n  effectiveMinWidth: Ember.computed(function() {\n    if (this.get('tableComponent.columnMode') === 'standard') {\n      return this.get('minWidth');\n    }\n    var nextColumnMaxDiff = this.get('nextResizableColumn.maxWidth') -\n        this.get('nextResizableColumn.width');\n    if (this.get('minWidth') && nextColumnMaxDiff) {\n      return Math.min(this.get('minWidth'), this.get('width') -\n          nextColumnMaxDiff);\n    } else if (this.get('minWidth')) {\n      return this.get('minWidth');\n    } else {\n      return this.get('width') - nextColumnMaxDiff;\n    }\n  }).property('width', 'minWidth', 'tableComponent.columnMode',\n      'nextResizableColumn.{width,maxWidth}'),\n\n  effectiveMaxWidth: Ember.computed(function() {\n    if (this.get('tableComponent.columnMode') === 'standard') {\n      return this.get('maxWidth');\n    }\n    var nextColumnMaxDiff = this.get('nextResizableColumn.width') -\n        this.get('nextResizableColumn.minWidth');\n    if (this.get('maxWidth') && !Ember.isNone(nextColumnMaxDiff)) {\n      return Math.min(this.get('maxWidth'), this.get('width') +\n          nextColumnMaxDiff);\n    } else if (this.get('maxWidth')) {\n      return this.get('maxWidth');\n    } else {\n      return this.get('width') + nextColumnMaxDiff;\n    }\n  }).property('width', 'minWidth', 'tableComponent.columnMode',\n      'nextResizableColumn.{width,minWidth}'),\n\n  // jQuery UI resizable option\n  resizableOption: Ember.computed(function() {\n    return {\n      handles: 'e', // Show the \"east\"/\"right\" handle\n      // We need about 10px as absolute minimums for the columns\n      minWidth: Math.max(this.get('effectiveMinWidth') || 0, 10),\n      maxWidth: this.get('effectiveMaxWidth'),\n      // TODO(azirbel): This is unexpected and needs documentation or removal\n      grid: this.get('column.snapGrid'),\n      resize: Ember.$.proxy(this.onColumnResize, this),\n      stop: Ember.$.proxy(this.onColumnResize, this)\n    };\n  }).property('effectiveMinWidth', 'effectiveMaxWidth'),\n\n  didInsertElement: function() {\n    // TODO(azirbel): Call this._super()\n    this.elementSizeDidChange();\n    this.recomputeResizableHandle();\n  },\n\n  willDestroyElement: function() {\n    if (this.$().is('.ui-resizable')) {\n      this.$().resizable('destroy');\n    }\n    this._super();\n  },\n\n  _isResizable: Ember.computed(function() {\n    if (this.get('tableComponent.columnMode') === 'standard') {\n      return this.get('column.isResizable');\n    } else {\n      return this.get('column.isResizable') && this.get('nextResizableColumn');\n    }\n  }).property('column.isResizable', 'tableComponent.columnMode',\n      'nextResizableColumn'),\n\n  // `event` here is a jQuery event\n  onColumnResize: function(event, ui) {\n    var newWidth = Math.round(ui.size.width);\n    if (this.get('tableComponent.columnMode') === 'standard') {\n      this.get('column').resize(newWidth);\n      this.set('tableComponent.columnsFillTable', false);\n    } else {\n      var diff = this.get('width') - newWidth;\n      this.get('column').resize(newWidth);\n      this.get('nextResizableColumn').resize(\n          this.get('nextResizableColumn.width') + diff);\n    }\n\n    this.elementSizeDidChange();\n\n    // Trigger the table resize (and redraw of layout) when resizing is done\n    if (event.type === 'resizestop') {\n      this.get('tableComponent').elementSizeDidChange();\n    }\n\n    this.get('context').sendAction('onColumnResized', this.get('column'), newWidth);\n  },\n\n  elementSizeDidChange: function() {\n    var maxHeight = 0;\n    // TODO(Louis): This seems bad...\n    Ember.$('.ember-table-header-block .ember-table-content').each(function() {\n      var thisHeight = Ember.$(this).outerHeight();\n      if (thisHeight > maxHeight) {\n        maxHeight = thisHeight;\n      }\n    });\n    this.set('tableComponent._contentHeaderHeight', maxHeight);\n  },\n\n  cellWidthDidChange: Ember.observer(function() {\n    Ember.run.schedule('afterRender', this, this.elementSizeDidChange);\n  }, 'width'),\n\n  resizableObserver: Ember.observer(function() {\n    this.recomputeResizableHandle();\n  }, 'resizableOption', 'column.isResizable', 'tableComponent.columnMode',\n      'nextResizableColumn'),\n\n  recomputeResizableHandle: function() {\n    if (this.get('_isResizable')) {\n      this.$().resizable(this.get('resizableOption'));\n    } else {\n      if (this.$().is('.ui-resizable')) {\n        this.$().resizable('destroy');\n      }\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/addon/views/header-row.js":"import Ember from 'ember';\nimport StyleBindingsMixin from 'ember-table/mixins/style-bindings';\nimport RegisterTableComponentMixin from 'ember-table/mixins/register-table-component';\n\n// We hacked this. There is an inconsistency at the level in which we are\n// handling scroll event...\nexport default Ember.View.extend(\nStyleBindingsMixin, RegisterTableComponentMixin, {\n  templateName: 'header-row',\n  classNames: ['ember-table-table-row', 'ember-table-header-row'],\n  styleBindings: ['width'],\n  columns: Ember.computed.alias('content'),\n  width: Ember.computed.alias('tableComponent._rowWidth'),\n\n  // Options for jQuery UI sortable\n  sortableOption: Ember.computed(function() {\n    return {\n      axis: 'x',\n      containment: 'parent',\n      cursor: 'move',\n      helper: 'clone',\n      items: \".ember-table-header-cell.sortable\",\n      opacity: 0.9,\n      placeholder: 'ui-state-highlight',\n      scroll: true,\n      tolerance: 'pointer',\n      update: Ember.$.proxy(this.onColumnSortDone, this),\n      stop: Ember.$.proxy(this.onColumnSortStop, this),\n      sort: Ember.$.proxy(this.onColumnSortChange, this)\n    };\n  }),\n\n  didInsertElement: function() {\n    this._super();\n    if (this.get('tableComponent.enableColumnReorder')) {\n      this.$('> div').sortable(this.get('sortableOption'));\n    }\n  },\n\n  willDestroyElement: function() {\n    if (this.get('tableComponent.enableColumnReorder')) {\n      // TODO(azirbel): Get rid of this check, as in onColumnSortDone?\n      var $divs = this.$('> div');\n      if ($divs) {\n        $divs.sortable('destroy');\n      }\n    }\n    this._super();\n  },\n\n  onColumnSortStop: function() {\n    this.set('tableComponent._isShowingSortableIndicator', false);\n  },\n\n  onColumnSortChange: function() {\n    var left = this.$('.ui-state-highlight').offset().left -\n        this.$().closest('.ember-table-tables-container').offset().left;\n    this.set('tableComponent._isShowingSortableIndicator', true);\n    this.set('tableComponent._sortableIndicatorLeft', left);\n  },\n\n  onColumnSortDone: function(event, ui) {\n    var newIndex = ui.item.index();\n    this.$('> div').sortable('cancel');\n    var view = Ember.View.views[ui.item.attr('id')];\n    var column = view.get('column');\n    this.get('tableComponent').onColumnSort(column, newIndex);\n    this.set('tableComponent._isShowingSortableIndicator', false);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/addon/views/header-table-container.js":"import Ember from 'ember';\nimport TableContainer from 'ember-table/views/table-container';\nimport ShowHorizontalScrollMixin from 'ember-table/mixins/show-horizontal-scroll';\nimport RegisterTableComponentMixin from 'ember-table/mixins/register-table-component';\n\nexport default TableContainer.extend(\nShowHorizontalScrollMixin, RegisterTableComponentMixin, {\n  templateName: 'header-table-container',\n  classNames: ['ember-table-table-container',\n      'ember-table-fixed-table-container',\n      'ember-table-header-container'],\n  height: Ember.computed.alias('tableComponent._headerHeight'),\n  width: Ember.computed.alias('tableComponent._tableContainerWidth')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/addon/views/lazy-container.js":"import Ember from 'ember';\nimport StyleBindingsMixin from 'ember-table/mixins/style-bindings';\n\nexport default Ember.ContainerView.extend(\nStyleBindingsMixin, {\n  classNames: 'lazy-list-container',\n  styleBindings: ['height'],\n  content: null,\n  itemViewClass: null,\n  rowHeight: null,\n  scrollTop: null,\n  startIndex: null,\n\n  init: function() {\n    this._super();\n    return this.onNumChildViewsDidChange();\n  },\n\n  height: Ember.computed(function() {\n    return this.get('content.length') * this.get('rowHeight');\n  }).property('content.length', 'rowHeight'),\n\n  numChildViews: Ember.computed(function() {\n    return this.get('numItemsShowing') + 2;\n  }).property('numItemsShowing'),\n\n  onNumChildViewsDidChange: Ember.observer(function() {\n    var view = this;\n    // We are getting the class from a string e.g. \"Ember.Table.Row\"\n    var itemViewClass = this.get('itemViewClass');\n    if (typeof itemViewClass === 'string') {\n      if (/[A-Z]+/.exec(itemViewClass)) {\n        // Global var lookup - 'App.MessagePreviewView'\n        itemViewClass = Ember.get(Ember.lookup, itemViewClass);\n      } else {\n        // Ember CLI Style lookup - 'message/preview'\n        itemViewClass = this.container.lookupFactory(\"view:\" + itemViewClass);\n      }\n    }\n    var newNumViews = this.get('numChildViews');\n    if (!itemViewClass || !newNumViews) {\n      return;\n    }\n    var oldNumViews = this.get('length');\n    var numViewsToInsert = newNumViews - oldNumViews;\n    // if newNumViews < oldNumViews we need to remove some views\n    if (numViewsToInsert < 0) {\n      var viewsToRemove = this.slice(newNumViews, oldNumViews);\n      this.removeObjects(viewsToRemove);\n    // if oldNumViews < newNumViews we need to add more views\n    } else if (numViewsToInsert > 0) {\n      for (var i = 0; i < numViewsToInsert; ++i) {\n        this.pushObject(view.createChildView(itemViewClass));\n      }\n    }\n    this.viewportDidChange();\n  }, 'numChildViews', 'itemViewClass'),\n\n  // TODO(Peter): Consider making this a computed... binding logic will go\n  // into the LazyItemMixin\n  viewportDidChange: Ember.observer(function() {\n    var childViews = this.get('childViews');\n    var content = this.get('content') || [];\n    var clength = content.get('length');\n    var numShownViews = Math.min(this.get('length'), clength);\n    var startIndex = this.get('startIndex');\n    // this is a necessary check otherwise we are trying to access an object\n    // that doesn't exist\n    if (startIndex + numShownViews >= clength) {\n      startIndex = clength - numShownViews;\n    }\n    if (startIndex < 0) {\n      startIndex = 0;\n    }\n    // for all views that we are not using... just remove content\n    // this makes them invisble\n    childViews.forEach(function(childView, i) {\n      if (i >= numShownViews) {\n        childView.set('content', null);\n        return;\n      }\n      var itemIndex = startIndex + i;\n      childView = childViews.objectAt(itemIndex % numShownViews);\n      var item = content.objectAt(itemIndex);\n      if (childView && item !== childView.get('content')) {\n        childView.teardownContent();\n        childView.set('itemIndex', itemIndex);\n        childView.set('content', item);\n        childView.prepareContent();\n      }\n    });\n  }, 'content.length', 'length', 'startIndex')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/addon/views/lazy-item.js":"import Ember from 'ember';\nimport StyleBindingsMixin from 'ember-table/mixins/style-bindings';\n\nexport default Ember.View.extend(StyleBindingsMixin, {\n  itemIndex: null,\n  prepareContent: Ember.K,\n  teardownContent: Ember.K,\n  rowHeightBinding: 'parentView.rowHeight',\n  styleBindings: ['width', 'top', 'display'],\n\n  top: Ember.computed(function() {\n    return this.get('itemIndex') * this.get('rowHeight');\n  }).property('itemIndex', 'rowHeight'),\n\n  // TODO(azirbel): Add explicit else case\n  display: Ember.computed(function() {\n    if (!this.get('content')) {\n      return 'none';\n    }\n  }).property('content')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/addon/views/lazy-table-block.js":"import Ember from 'ember';\nimport RegisterTableComponentMixin from 'ember-table/mixins/register-table-component';\nimport LazyContainerView from 'ember-table/views/lazy-container';\n\nexport default LazyContainerView.extend(\nRegisterTableComponentMixin, {\n  classNames: ['ember-table-table-block'],\n  styleBindings: ['width'],\n  itemViewClass: Ember.computed.alias('tableComponent.tableRowViewClass'),\n  rowHeight: Ember.computed.alias('tableComponent.rowHeight'),\n  columns: null,\n  content: null,\n  scrollLeft: null,\n  scrollTop: null,\n\n  onScrollLeftDidChange: Ember.observer(function() {\n    this.$().scrollLeft(this.get('scrollLeft'));\n  }, 'scrollLeft')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/addon/views/multi-item-collection.js":"import Ember from 'ember';\nimport StyleBindingsMixin from 'ember-table/mixins/style-bindings';\n\nexport default Ember.CollectionView.extend(\nStyleBindingsMixin, {\n  styleBindings: 'width',\n  itemViewClassField: null,\n\n  createChildView: function(view, attrs) {\n    var itemViewClassField = this.get('itemViewClassField');\n    var itemViewClass = attrs.content.get(itemViewClassField);\n    if (typeof itemViewClass === 'string') {\n      if (/[A-Z]+/.exec(itemViewClass)) {\n        // Global var lookup - 'App.MessagePreviewView'\n        itemViewClass = Ember.get(Ember.lookup, itemViewClass);\n      } else {\n        // Ember CLI Style lookup - 'message/preview'\n        itemViewClass = this.container.lookupFactory(\"view:\" + itemViewClass);\n      }\n    }\n    return this._super(itemViewClass, attrs);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/addon/views/scroll-container.js":"import Ember from 'ember';\nimport StyleBindingsMixin from 'ember-table/mixins/style-bindings';\nimport RegisterTableComponentMixin from 'ember-table/mixins/register-table-component';\nimport ScrollHandlerMixin from 'ember-table/mixins/scroll-handler';\n\nexport default Ember.View.extend(\nStyleBindingsMixin, ScrollHandlerMixin, RegisterTableComponentMixin, {\n  templateName: 'scroll-container',\n  classNames: ['ember-table-scroll-container'],\n  styleBindings: ['left', 'width', 'height'],\n  scrollElementSelector: '.antiscroll-inner',\n  width: Ember.computed.alias('tableComponent._scrollContainerWidth'),\n  // 10 is the height of the horizontal scrollbar\n  height: 10,\n  left: Ember.computed.alias('tableComponent._fixedColumnsWidth'),\n  scrollTop: Ember.computed.alias('tableComponent._tableScrollTop'),\n  scrollLeft: Ember.computed.alias('tableComponent._tableScrollLeft'),\n\n  // HACK: onScrollLeftDidChange will not fire unless scrollLeft has been get\n  // at least once. Therefore, we want to call onScrollLeftDidChange in\n  // didInsertElement\n  didInsertElement: function() {\n    this._super();\n    this.onScrollLeftDidChange();\n  },\n\n  // `event` here is a jQuery event\n  onScroll: function(event) {\n    this.set('scrollLeft', event.target.scrollLeft);\n    event.preventDefault();\n  },\n\n  onScrollLeftDidChange: Ember.observer(function() {\n    var selector = this.get('scrollElementSelector');\n    this.$(selector).scrollLeft(this.get('scrollLeft'));\n  }, 'scrollLeft', 'scrollElementSelector')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/addon/views/scroll-panel.js":"import Ember from 'ember';\nimport StyleBindingsMixin from 'ember-table/mixins/style-bindings';\nimport RegisterTableComponentMixin from 'ember-table/mixins/register-table-component';\n\nexport default Ember.View.extend(\nStyleBindingsMixin, RegisterTableComponentMixin, {\n  classNames: ['ember-table-scroll-panel'],\n  styleBindings: ['width', 'height'],\n  width: Ember.computed.alias('tableComponent._tableColumnsWidth'),\n  height: Ember.computed.alias('tableComponent._tableContentHeight')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/addon/views/table-block.js":"import Ember from 'ember';\nimport StyleBindingsMixin from 'ember-table/mixins/style-bindings';\nimport RegisterTableComponentMixin from 'ember-table/mixins/register-table-component';\n\n// TODO: This should be a mixin\nexport default Ember.CollectionView.extend(\nStyleBindingsMixin, RegisterTableComponentMixin, {\n  classNames: ['ember-table-table-block'],\n  styleBindings: ['width', 'height'],\n  itemViewClass: Ember.computed.alias('tableComponent.tableRowViewClass'),\n  columns: null,\n  content: null,\n  scrollLeft: null,\n\n  onScrollLeftDidChange: Ember.observer(function() {\n    this.$().scrollLeft(this.get('scrollLeft'));\n  }, 'scrollLeft'),\n\n  height: Ember.computed(function() {\n    return this.get('tableComponent._headerHeight');\n  }).property('tableComponent._headerHeight')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/addon/views/table-cell.js":"import Ember from 'ember';\nimport StyleBindingsMixin from 'ember-table/mixins/style-bindings';\n\nexport default Ember.View.extend(\nStyleBindingsMixin, {\n  // ---------------------------------------------------------------------------\n  // API - Inputs\n  // ---------------------------------------------------------------------------\n\n  // TODO: Doc\n  templateName: 'table-cell',\n  classNames: ['ember-table-cell'],\n  classNameBindings: 'column.textAlign',\n  styleBindings: 'width',\n\n  // ---------------------------------------------------------------------------\n  // Internal properties\n  // ---------------------------------------------------------------------------\n\n  init: function() {\n    this._super();\n    this.contentPathDidChange();\n    this.contentDidChange();\n  },\n\n  row: Ember.computed.alias('parentView.row'),\n  column: Ember.computed.alias('content'),\n  width: Ember.computed.alias('column.width'),\n\n  contentDidChange: function() {\n    this.notifyPropertyChange('cellContent');\n  },\n\n  contentPathWillChange: Ember.beforeObserver(function() {\n    var contentPath = this.get('column.contentPath');\n    if (contentPath) {\n      this.removeObserver(\"row.\" + contentPath, this,\n          this.contentDidChange);\n    }\n  }, 'column.contentPath'),\n\n  contentPathDidChange: Ember.beforeObserver(function() {\n    var contentPath = this.get('column.contentPath');\n    if (contentPath) {\n      this.addObserver(\"row.\" + contentPath, this,\n          this.contentDidChange);\n    }\n  }, 'column.contentPath'),\n\n  cellContent: Ember.computed(function(key, value) {\n    var row = this.get('row');\n    var column = this.get('column');\n    if (!row || !column) {\n      return;\n    }\n    if (arguments.length === 1) {\n      value = column.getCellContent(row);\n    } else {\n      column.setCellContent(row, value);\n    }\n    return value;\n  }).property('row.isLoaded', 'column')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/addon/views/table-container.js":"import Ember from 'ember';\nimport StyleBindingsMixin from 'ember-table/mixins/style-bindings';\n\nexport default Ember.View.extend(\nStyleBindingsMixin, {\n  classNames: ['ember-table-table-container'],\n  styleBindings: ['height', 'width']\n});\n","/home/travis/build/npmtest/node-npmtest-ember-table/node_modules/ember-table/addon/views/table-row.js":"import Ember from 'ember';\nimport RegisterTableComponentMixin from 'ember-table/mixins/register-table-component';\nimport LazyItemView from 'ember-table/views/lazy-item';\n\nexport default LazyItemView.extend(\nRegisterTableComponentMixin, {\n  templateName: 'table-row',\n  classNames: 'ember-table-table-row',\n  classNameBindings: ['row.isHovered:ember-table-hover',\n      'row.isSelected:ember-table-selected',\n      'row.rowStyle',\n      'isLastRow:ember-table-last-row'],\n  styleBindings: ['width', 'height'],\n  row: Ember.computed.alias('content'),\n  columns: Ember.computed.alias('parentView.columns'),\n  width: Ember.computed.alias('tableComponent._rowWidth'),\n  height: Ember.computed.alias('tableComponent.rowHeight'),\n\n  // Use `lastItem` (set manually) instead of the array's built-in `lastObject`\n  // to avoid creating a controller for last row on table initialization.  If\n  // this TableRow is the last row, then the row controller should have been\n  // created and set to `lastItem` in RowArrayController, otherwise `lastItem`\n  // is null.\n  isLastRow: Ember.computed(function() {\n    return this.get('row') ===\n        this.get('tableComponent.bodyContent.lastItem');\n  }).property('tableComponent.bodyContent.lastItem', 'row'),\n\n  // TODO(azirbel): Could simplify slightly via\n  // this.set('row.isHovered', true) and remove the temp variable.\n  // Also applies below/elsewhere.\n  mouseEnter: function() {\n    var row = this.get('row');\n    if (row) {\n      row.set('isHovered', true);\n    }\n  },\n\n  mouseLeave: function() {\n    var row = this.get('row');\n    if (row) {\n      row.set('isHovered', false);\n    }\n  },\n\n  teardownContent: function() {\n    var row = this.get('row');\n    if (row) {\n      row.set('isHovered', false);\n    }\n  }\n});\n"}